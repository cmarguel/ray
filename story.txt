This logs my attempt to make a raytracer. I have very little idea of how to do this, 
and am more or less making it up as I go along.

23 Sept 2012
	1. 	Implemented basic math and geometry types/functions.
	2. 	Found a page which describes how to get the intersection of a ray and a triangle, so 
	  	that's a huge help right there. http://www.softsurfer.com/Archive/algorithm_0105/algorithm_0105.htm
	3. 	Rendered a simple triangle. Progress?? Right now, the technique is as follows: for each pixel
		in the output, shoot a ray from the camera eye (positioned at width/2,height/2,0) to the 
		corresponding pixel at (x, y, 50). If the ray ever hits a triangle, render it.
	4.	Currently, I'm assuming a very simple camera--stationary, where up is always <0,1,0>.
	5.	Okay, at this point I decided to use PBRT as a reference. At this point I may end up renaming 
		stuff to jive with the book, and adding classes with similar/same names.
		
24 Sept 2012
	1.	Implemented transforms. As per PBRT, we work with 3d vectors, but they're converted to 
		4d vectors during transformations. As far as I know, the fourth dimension is unnecessary
		for rendering, though we should probably keep this to 1.
27 Sept 2012
	1.	Used a simple magnitude comparison to prevent triangles from rendering over triangles in front of them.
	2.	Changed method for computing color, but the way I'm computing color is wrong to begin with, so using the right colors might be the next change. After that, I'll need to work on accelerating rendering by not testing every single triangle.

28 Sept 2012
	1.	Moving Camera into its own folder and implementing LookAt. This camera is a simple pinhole camera.
	2.	On a related note, also moving GenerateRay to camera method, where it should really have been from the start.
	3.	Also, created a World struct for holding world info.

29 Sept 2012
	1.	Added cubes.
	2.	I've temporarily added a color attribute to triangles so that I can color the cubes 
		with Rubik colors to help me figure out what's going on with the perspective.
	3.	Adding lighting, starting with a simple point light. Attenuation is quadratic.
	4.	Will be making the cubes appear in more of a grid-like fashion.
	5.	It seems that my Y-axis is inverted, and I think something might be wrong with the X-axis too.